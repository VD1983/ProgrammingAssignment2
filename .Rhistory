## Two functions have been defined below with the objective to create a special "matrix" object that
## stores a matrix and caches its inverse.
## makecacheMatric function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
setMatrixInv <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(setMatrixInv = setMatrixInv,
getMatrixInv = getMatrixInv,
setInverse = setInverse,
getInverse = getInverse)
}
## cacheSolve function computes the inverse of the special "matrix" returned by
## makeCacheMatrix above. If the inverse has already been calculated
## (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("Retreiving previoulsy cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mymat, ...)
x$setInverse(inv)
inv
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
## Two functions have been defined below with the objective to create a special "matrix" object that
## stores a matrix and caches its inverse.
## makecacheMatrix function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
setMatrixInv <- function(y) {
x <<- y
inv <<- NULL
}
getMatrixInv <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(setMatrixInv = setMatrixInv,
getMatrixInv = getMatrixInv,
setInverse = setInverse,
getInverse = getInverse)
}
## cacheSolve function computes the inverse of the special "matrix" returned by
## makeCacheMatrix above. If the inverse has already been calculated
## (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("Retreiving previoulsy cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mymat, ...)
x$setInverse(inv)
inv
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$getMatrixInv()
## Two functions have been defined below with the objective to create a special "matrix" object that
## stores a matrix and caches its inverse.
## makecacheMatrix function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
setMatrix <- function(y) {
x <<- y
inv <<- NULL
}
getMatrix <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(setMatrix = setMatrix,
getMatrix = getMatrix,
setInverse = setInverse,
getInverse = getInverse)
}
## cacheSolve function computes the inverse of the special "matrix" returned by
## makeCacheMatrix above. If the inverse has already been calculated
## (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("Retreiving previoulsy cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mymat, ...)
x$setInverse(inv)
inv
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$getMatrixInv()
my_matrix$getMatrix()
my_matrix$getInverse()
cacheSolve(my_matrix)
## Two functions have been defined below with the objective to create a special "matrix" object that
## stores a matrix and caches its inverse.
## makecacheMatrix function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
setMatrix <- function(y) {
x <<- y
inv <<- NULL
}
getMatrix <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(setMatrix = setMatrix,
getMatrix = getMatrix,
setInverse = setInverse,
getInverse = getInverse)
}
## cacheSolve function computes the inverse of the special "matrix" returned by
## makeCacheMatrix above. If the inverse has already been calculated
## (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("Retreiving previoulsy cached data")
return(inv)
}
mat <- x$getMatrix()
inv <- solve(mymat, ...)
x$setInverse(inv)
inv
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$getMatrix()
cacheSolve(my_matrix)
## Two functions have been defined below with the objective to create a special "matrix" object that
## stores a matrix and caches its inverse.
## makecacheMatrix function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
setMatrix <- function(y) {
x <<- y
inv <<- NULL
}
getMatrix <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(setMatrix = setMatrix,
getMatrix = getMatrix,
setInverse = setInverse,
getInverse = getInverse)
}
## cacheSolve function computes the inverse of the special "matrix" returned by
## makeCacheMatrix above. If the inverse has already been calculated
## (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("Retreiving previoulsy cached data")
return(inv)
}
mymat <- x$getMatrix()
inv <- solve(mymat, ...)
x$setInverse(inv)
inv
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$getMatrix()
my_matrix$getInverse()
cacheSolve(my_matrix)
my_matrix$getInverse()
cacheSolve(my_matrix)
